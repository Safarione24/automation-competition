{"name": "Fill and submit complete form", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=141.0.7390.67)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff79914e955+80021]\n\tGetHandleVerifier [0x0x7ff79914e9b0+80112]\n\t(No symbol) [0x0x7ff798ed060f]\n\t(No symbol) [0x0x7ff798ea82f1]\n\t(No symbol) [0x0x7ff798f588be]\n\t(No symbol) [0x0x7ff798f78fa2]\n\t(No symbol) [0x0x7ff798f51003]\n\t(No symbol) [0x0x7ff798f195d1]\n\t(No symbol) [0x0x7ff798f1a3f3]\n\tGetHandleVerifier [0x0x7ff79940dd0d+2960461]\n\tGetHandleVerifier [0x0x7ff799407fca+2936586]\n\tGetHandleVerifier [0x0x7ff799428a07+3070279]\n\tGetHandleVerifier [0x0x7ff79916843e+185214]\n\tGetHandleVerifier [0x0x7ff79916fe8f+216527]\n\tGetHandleVerifier [0x0x7ff799157b94+117460]\n\tGetHandleVerifier [0x0x7ff799157d4f+117903]\n\tGetHandleVerifier [0x0x7ff79913dc28+11112]\n\tBaseThreadInitThunk [0x0x7ffd0b6d7374+20]\n\tRtlUserThreadStart [0x0x7ffd0c33cc91+33]", "trace": "self = <tests.test_form_fields.TestFormFields object at 0x000001E4A2D1A5D0>\n\n    @allure.title(\"Fill and submit complete form\")\n    @allure.description(\"Test complete form filling with all fields and verify success alert\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_form_fields(self):\n        driver = webdriver.Chrome()\n        page = FormFieldsPage(driver)\n    \n        try:\n            with allure.step(\"Open form fields page\"):\n                page.open()\n>               allure.attach(driver.get_screenshot_as_png(), name=\"page_opened\", attachment_type=allure.attachment_type.PNG)\n                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests\\test_form_fields.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:837: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:848: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E4A2D1EF90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff79913dc28+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd0b6d7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd0c33cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=141.0.7390.67)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff79914e955+80021]\nE       \tGetHandleVerifier [0x0x7ff79914e9b0+80112]\nE       \t(No symbol) [0x0x7ff798ed060f]\nE       \t(No symbol) [0x0x7ff798ea82f1]\nE       \t(No symbol) [0x0x7ff798f588be]\nE       \t(No symbol) [0x0x7ff798f78fa2]\nE       \t(No symbol) [0x0x7ff798f51003]\nE       \t(No symbol) [0x0x7ff798f195d1]\nE       \t(No symbol) [0x0x7ff798f1a3f3]\nE       \tGetHandleVerifier [0x0x7ff79940dd0d+2960461]\nE       \tGetHandleVerifier [0x0x7ff799407fca+2936586]\nE       \tGetHandleVerifier [0x0x7ff799428a07+3070279]\nE       \tGetHandleVerifier [0x0x7ff79916843e+185214]\nE       \tGetHandleVerifier [0x0x7ff79916fe8f+216527]\nE       \tGetHandleVerifier [0x0x7ff799157b94+117460]\nE       \tGetHandleVerifier [0x0x7ff799157d4f+117903]\nE       \tGetHandleVerifier [0x0x7ff79913dc28+11112]\nE       \tBaseThreadInitThunk [0x0x7ffd0b6d7374+20]\nE       \tRtlUserThreadStart [0x0x7ffd0c33cc91+33]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException\n\nDuring handling of the above exception, another exception occurred:\n\nself = <tests.test_form_fields.TestFormFields object at 0x000001E4A2D1A5D0>\n\n    @allure.title(\"Fill and submit complete form\")\n    @allure.description(\"Test complete form filling with all fields and verify success alert\")\n    @allure.severity(allure.severity_level.CRITICAL)\n    def test_form_fields(self):\n        driver = webdriver.Chrome()\n        page = FormFieldsPage(driver)\n    \n        try:\n            with allure.step(\"Open form fields page\"):\n                page.open()\n                allure.attach(driver.get_screenshot_as_png(), name=\"page_opened\", attachment_type=allure.attachment_type.PNG)\n    \n            with allure.step(\"Fill name field\"):\n                page.fill_name(\"Safarmon\")\n    \n            with allure.step(\"Fill password field\"):\n                page.fill_password(\"SecurePass123\")\n    \n            with allure.step(\"Select drink option\"):\n                page.select_drink()\n    \n            with allure.step(\"Select color checkbox\"):\n                page.select_color()\n    \n            with allure.step(\"Select automation preference\"):\n                page.select_automation_like(\"yes\")\n    \n            with allure.step(\"Fill email field\"):\n                page.fill_email(\"test@example.com\")\n    \n            with allure.step(\"Copy automation tools to message\"):\n                tools = page.copy_automation_tools()\n                allure.attach(str(tools), name=\"automation_tools\", attachment_type=allure.attachment_type.TEXT)\n    \n            with allure.step(\"Submit form\"):\n                page.submit_form()\n    \n            with allure.step(\"Verify success alert\"):\n                alert_text = page.get_alert_text()\n                allure.attach(alert_text, name=\"alert_text\", attachment_type=allure.attachment_type.TEXT)\n                assert \"Message received\" in alert_text\n    \n            with allure.step(\"Test completed successfully\"):\n                print(\"✅ ТЕСТ ПРОЙДЕН!\")\n    \n        except Exception as e:\n            # Скриншот при ошибке\n>           driver.save_screenshot(\"error.png\")\n\ntests\\test_form_fields.py:57: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:827: in save_screenshot\n    return self.get_screenshot_as_file(filename)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:803: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\n          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:837: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:848: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:346: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001E4A2D1EF90>\nresponse = {'status': 404, 'value': '{\"value\":{\"error\":\"no such window\",\"message\":\"no such window: target window already closed\\\\...ff79913dc28+11112]\\\\n\\\\tBaseThreadInitThunk [0x0x7ffd0b6d7374+20]\\\\n\\\\tRtlUserThreadStart [0x0x7ffd0c33cc91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nE       from unknown error: web view not found\nE         (Session info: chrome=141.0.7390.67)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x0x7ff79914e955+80021]\nE       \tGetHandleVerifier [0x0x7ff79914e9b0+80112]\nE       \t(No symbol) [0x0x7ff798ed060f]\nE       \t(No symbol) [0x0x7ff798ea82f1]\nE       \t(No symbol) [0x0x7ff798f588be]\nE       \t(No symbol) [0x0x7ff798f78fa2]\nE       \t(No symbol) [0x0x7ff798f51003]\nE       \t(No symbol) [0x0x7ff798f195d1]\nE       \t(No symbol) [0x0x7ff798f1a3f3]\nE       \tGetHandleVerifier [0x0x7ff79940dd0d+2960461]\nE       \tGetHandleVerifier [0x0x7ff799407fca+2936586]\nE       \tGetHandleVerifier [0x0x7ff799428a07+3070279]\nE       \tGetHandleVerifier [0x0x7ff79916843e+185214]\nE       \tGetHandleVerifier [0x0x7ff79916fe8f+216527]\nE       \tGetHandleVerifier [0x0x7ff799157b94+117460]\nE       \tGetHandleVerifier [0x0x7ff799157d4f+117903]\nE       \tGetHandleVerifier [0x0x7ff79913dc28+11112]\nE       \tBaseThreadInitThunk [0x0x7ffd0b6d7374+20]\nE       \tRtlUserThreadStart [0x0x7ffd0c33cc91+33]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: NoSuchWindowException"}, "description": "Test complete form filling with all fields and verify success alert", "steps": [{"name": "Open form fields page", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.NoSuchWindowException: Message: no such window: target window already closed\nfrom unknown error: web view not found\n  (Session info: chrome=141.0.7390.67)\nStacktrace:\n\tGetHandleVerifier [0x0x7ff79914e955+80021]\n\tGetHandleVerifier [0x0x7ff79914e9b0+80112]\n\t(No symbol) [0x0x7ff798ed060f]\n\t(No symbol) [0x0x7ff798ea82f1]\n\t(No symbol) [0x0x7ff798f588be]\n\t(No symbol) [0x0x7ff798f78fa2]\n\t(No symbol) [0x0x7ff798f51003]\n\t(No symbol) [0x0x7ff798f195d1]\n\t(No symbol) [0x0x7ff798f1a3f3]\n\tGetHandleVerifier [0x0x7ff79940dd0d+2960461]\n\tGetHandleVerifier [0x0x7ff799407fca+2936586]\n\tGetHandleVerifier [0x0x7ff799428a07+3070279]\n\tGetHandleVerifier [0x0x7ff79916843e+185214]\n\tGetHandleVerifier [0x0x7ff79916fe8f+216527]\n\tGetHandleVerifier [0x0x7ff799157b94+117460]\n\tGetHandleVerifier [0x0x7ff799157d4f+117903]\n\tGetHandleVerifier [0x0x7ff79913dc28+11112]\n\tBaseThreadInitThunk [0x0x7ffd0b6d7374+20]\n\tRtlUserThreadStart [0x0x7ffd0c33cc91+33]\n\n", "trace": "  File \"C:\\Users\\Сафар\\Desktop\\automatization_konkurs\\tests\\test_form_fields.py\", line 20, in test_form_fields\n    allure.attach(driver.get_screenshot_as_png(), name=\"page_opened\", attachment_type=allure.attachment_type.PNG)\n                  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Сафар\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 837, in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\n                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^\n  File \"C:\\Users\\Сафар\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 848, in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\n           ~~~~~~~~~~~~^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\Сафар\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 346, in execute\n    self.error_handler.check_response(response)\n    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~^^^^^^^^^^\n  File \"C:\\Users\\Сафар\\AppData\\Local\\Programs\\Python\\Python313\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 229, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1760274614184, "stop": 1760274622704}], "start": 1760274613043, "stop": 1760274624803, "uuid": "88649f5b-b733-4ca4-808a-7988e4b68d64", "historyId": "bf531626bbd8d88007c6c9cbaa9f2d5e", "testCaseId": "bf531626bbd8d88007c6c9cbaa9f2d5e", "fullName": "tests.test_form_fields.TestFormFields#test_form_fields", "labels": [{"name": "epic", "value": "Practice Automation"}, {"name": "story", "value": "Complete Form Submission"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "Form Fields"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_form_fields"}, {"name": "subSuite", "value": "TestFormFields"}, {"name": "host", "value": "Home-PC"}, {"name": "thread", "value": "9220-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_form_fields"}], "titlePath": ["tests", "test_form_fields.py", "TestFormFields"]}